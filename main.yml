# Setting host
- hosts: localhost
  gather_facts: false
#Variables
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    image_name: my-ruby-app 
    image_tag: v1
    replicas: 2
# Pre-Tasks to check if Minikube is running and start if not running
  pre_tasks:
    - name: Get hash of the image_name if it already exists locally
      shell: |
        eval $(minikube docker-env)
        docker images -q {{ image_name }}
      register: image_hash
      changed_when: false
    - name: Build the image for the app using docker if it is not built already
      shell: | 
        eval $(minikube docker-env)
        docker build -t {{ image_name }}:{{ image_tag }} .
      when: not image_hash.stdout
    - name: Check Minikube's status.
      command: minikube status
      register: minikube_status
      changed_when: false
      ignore_errors: true
    # If minikube not started then start the same
    - name: Starting minikube as it is not running
      command: minikube start
      when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"
    # Create Kubernetes deployment for ruby web
    - name: Create a deploy for ruby web
      k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ruby-web
            namespace: default
            labels:
              app: ruby-web
          spec:
            replicas: "{{ replicas }}"
            selector:
              matchLabels:
                app: ruby-web
            template:
              metadata:
                labels:
                  app: ruby-web
              spec:
                securityContext:
                  capabilities:
                    drop:
                    - ALL
                  runAsUser: 1000
                  runAsGroup: 3000
                  runAsNonRoot: true
                containers:
                - name: ruby-web
                  image: "{{ image_name }}:{{ image_tag }}"
                  livenessProbe:
                    httpGet:
                      path: /healthcheck
                      port: 80
                    initialDelaySeconds: 3
                    periodSeconds: 3
                  readinessProbe:
                    httpGet:
                      path: /healthcheck
                      port: 80
                  ports:
                  - containerPort: 80        
    # Create service to expose our ruby web
    - name: create service for ruby web
      k8s:
        state: present
        definition:
          kind: Service
          apiVersion: v1
          metadata:
            name: ruby-web
            namespace: default
          spec:
            selector:
              app: ruby-web
            ports:
            - protocol: TCP
              port: 80
              targetPort: 80
              nodePort: 31000
            type: LoadBalancer
